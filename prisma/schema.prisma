generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  name             String
  username         String   @unique
  email            String   @unique
  password         String?
  ProfilePageImage String?
  bio              String?
  city             String?
  website          String?
  avatarUrl        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  techStack        String[]

  chats     Chat[]     @relation("UserChats")
  messages  Message[]  @relation("UserMessagesSent")
  posts     Post[]
  articles  Article[]
  likes     Like[]
  comments  Comment[]
  bookmarks Bookmark[]
  polls     Poll[]
  pollVotes PollVote[]
  projects  Project[]
  following Follow[]   @relation("Following")
  followers Follow[]   @relation("Followers")
}

model Chat {
  id        String    @id @unique @default(uuid())
  userId    String
  user      User      @relation("UserChats", fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[] @relation("ChatMessages")
}

model Message {
  id         String   @id @unique @default(uuid())
  senderId   String
  receiverId String
  sender     User     @relation("UserMessagesSent", fields: [senderId], references: [id])
  chatId     String
  chat       Chat     @relation("ChatMessages", fields: [chatId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
}

model Post {
  id        String     @id @default(uuid())
  content   String?
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  likes     Like[]
  comments  Comment[]
  bookmarks Bookmark[]
}

model Article {
  id          String   @id @default(uuid())
  title       String
  description String
  content     String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  likes     Like[]
  bookmarks Bookmark[]
}

model Project {
  id                 String   @id @default(uuid())
  projectName        String
  projectDescription String
  image              String
  projectLink        String?
  projectRepoLink    String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt()
  userId             String
  user               User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String?
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  articleId String?
  article   Article? @relation(fields: [articleId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@unique([articleId, userId])
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  articleId String?
  article   Article? @relation(fields: [articleId], references: [id])

  @@unique([userId, postId])
  @@unique([articleId, userId])
}

model Poll {
  id        String       @id @default(cuid())
  question  String
  options   PollOption[]
  creator   User         @relation(fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime     @default(now())
}

model PollOption {
  id          String     @id @default(cuid())
  text        String
  votesNumber Int        @default(0)
  poll        Poll       @relation(fields: [pollId], references: [id])
  pollId      String
  votes       PollVote[]
}

model PollVote {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  option    PollOption @relation(fields: [optionId], references: [id])
  optionId  String
  createdAt DateTime   @default(now())
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id])
  following User @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}
